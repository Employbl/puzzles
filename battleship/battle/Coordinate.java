/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package battle;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Coordinate implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Coordinate");
  private static final TField ROW_FIELD_DESC = new TField("row", TType.I32, (short)1);
  private static final TField COLUMN_FIELD_DESC = new TField("column", TType.I32, (short)2);

  public int row;
  public static final int ROW = 1;
  public int column;
  public static final int COLUMN = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean row = false;
    public boolean column = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(ROW, new FieldMetaData("row", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(COLUMN, new FieldMetaData("column", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Coordinate.class, metaDataMap);
  }

  public Coordinate() {
  }

  public Coordinate(
    int row,
    int column)
  {
    this();
    this.row = row;
    this.__isset.row = true;
    this.column = column;
    this.__isset.column = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Coordinate(Coordinate other) {
    __isset.row = other.__isset.row;
    this.row = other.row;
    __isset.column = other.__isset.column;
    this.column = other.column;
  }

  @Override
  public Coordinate clone() {
    return new Coordinate(this);
  }

  public int getRow() {
    return this.row;
  }

  public void setRow(int row) {
    this.row = row;
    this.__isset.row = true;
  }

  public void unsetRow() {
    this.__isset.row = false;
  }

  // Returns true if field row is set (has been asigned a value) and false otherwise
  public boolean isSetRow() {
    return this.__isset.row;
  }

  public void setRowIsSet(boolean value) {
    this.__isset.row = value;
  }

  public int getColumn() {
    return this.column;
  }

  public void setColumn(int column) {
    this.column = column;
    this.__isset.column = true;
  }

  public void unsetColumn() {
    this.__isset.column = false;
  }

  // Returns true if field column is set (has been asigned a value) and false otherwise
  public boolean isSetColumn() {
    return this.__isset.column;
  }

  public void setColumnIsSet(boolean value) {
    this.__isset.column = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ROW:
      if (value == null) {
        unsetRow();
      } else {
        setRow((Integer)value);
      }
      break;

    case COLUMN:
      if (value == null) {
        unsetColumn();
      } else {
        setColumn((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ROW:
      return new Integer(getRow());

    case COLUMN:
      return new Integer(getColumn());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ROW:
      return isSetRow();
    case COLUMN:
      return isSetColumn();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Coordinate)
      return this.equals((Coordinate)that);
    return false;
  }

  public boolean equals(Coordinate that) {
    if (that == null)
      return false;

    boolean this_present_row = true;
    boolean that_present_row = true;
    if (this_present_row || that_present_row) {
      if (!(this_present_row && that_present_row))
        return false;
      if (this.row != that.row)
        return false;
    }

    boolean this_present_column = true;
    boolean that_present_column = true;
    if (this_present_column || that_present_column) {
      if (!(this_present_column && that_present_column))
        return false;
      if (this.column != that.column)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ROW:
          if (field.type == TType.I32) {
            this.row = iprot.readI32();
            this.__isset.row = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COLUMN:
          if (field.type == TType.I32) {
            this.column = iprot.readI32();
            this.__isset.column = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ROW_FIELD_DESC);
    oprot.writeI32(this.row);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COLUMN_FIELD_DESC);
    oprot.writeI32(this.column);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Coordinate(");
    boolean first = true;

    sb.append("row:");
    sb.append(this.row);
    first = false;
    if (!first) sb.append(", ");
    sb.append("column:");
    sb.append(this.column);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

