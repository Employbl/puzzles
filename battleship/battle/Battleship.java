/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package battle;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Battleship {

  public interface Iface {

    public int registerClient(String email) throws TException;

    public boolean join(int gameID, String email) throws DuplicateEmailException, TException;

    public boolean isMyTurn() throws GameOverException, UnregisteredException, TException;

    public boolean placePiece(int piece, Coordinate coord, boolean horizontal) throws UnregisteredException, TException;

    public int attack(Coordinate coord) throws GameOverException, UnregisteredException, TException;

    public Coordinate getOpponentsLastAttack() throws NoMovesMadeException, UnregisteredException, TException;

    public String winGame() throws UnregisteredException, TException;

    public void spawnAI() throws TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public int registerClient(String email) throws TException
    {
      send_registerClient(email);
      return recv_registerClient();
    }

    public void send_registerClient(String email) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerClient", TMessageType.CALL, seqid_));
      registerClient_args args = new registerClient_args();
      args.email = email;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_registerClient() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      registerClient_result result = new registerClient_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerClient failed: unknown result");
    }

    public boolean join(int gameID, String email) throws DuplicateEmailException, TException
    {
      send_join(gameID, email);
      return recv_join();
    }

    public void send_join(int gameID, String email) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("join", TMessageType.CALL, seqid_));
      join_args args = new join_args();
      args.gameID = gameID;
      args.email = email;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_join() throws DuplicateEmailException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      join_result result = new join_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.dee != null) {
        throw result.dee;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "join failed: unknown result");
    }

    public boolean isMyTurn() throws GameOverException, UnregisteredException, TException
    {
      send_isMyTurn();
      return recv_isMyTurn();
    }

    public void send_isMyTurn() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isMyTurn", TMessageType.CALL, seqid_));
      isMyTurn_args args = new isMyTurn_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isMyTurn() throws GameOverException, UnregisteredException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      isMyTurn_result result = new isMyTurn_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.goe != null) {
        throw result.goe;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isMyTurn failed: unknown result");
    }

    public boolean placePiece(int piece, Coordinate coord, boolean horizontal) throws UnregisteredException, TException
    {
      send_placePiece(piece, coord, horizontal);
      return recv_placePiece();
    }

    public void send_placePiece(int piece, Coordinate coord, boolean horizontal) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("placePiece", TMessageType.CALL, seqid_));
      placePiece_args args = new placePiece_args();
      args.piece = piece;
      args.coord = coord;
      args.horizontal = horizontal;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_placePiece() throws UnregisteredException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      placePiece_result result = new placePiece_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "placePiece failed: unknown result");
    }

    public int attack(Coordinate coord) throws GameOverException, UnregisteredException, TException
    {
      send_attack(coord);
      return recv_attack();
    }

    public void send_attack(Coordinate coord) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("attack", TMessageType.CALL, seqid_));
      attack_args args = new attack_args();
      args.coord = coord;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_attack() throws GameOverException, UnregisteredException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      attack_result result = new attack_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.goe != null) {
        throw result.goe;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "attack failed: unknown result");
    }

    public Coordinate getOpponentsLastAttack() throws NoMovesMadeException, UnregisteredException, TException
    {
      send_getOpponentsLastAttack();
      return recv_getOpponentsLastAttack();
    }

    public void send_getOpponentsLastAttack() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getOpponentsLastAttack", TMessageType.CALL, seqid_));
      getOpponentsLastAttack_args args = new getOpponentsLastAttack_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Coordinate recv_getOpponentsLastAttack() throws NoMovesMadeException, UnregisteredException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getOpponentsLastAttack_result result = new getOpponentsLastAttack_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.nmme != null) {
        throw result.nmme;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getOpponentsLastAttack failed: unknown result");
    }

    public String winGame() throws UnregisteredException, TException
    {
      send_winGame();
      return recv_winGame();
    }

    public void send_winGame() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("winGame", TMessageType.CALL, seqid_));
      winGame_args args = new winGame_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_winGame() throws UnregisteredException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      winGame_result result = new winGame_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "winGame failed: unknown result");
    }

    public void spawnAI() throws TException
    {
      send_spawnAI();
      recv_spawnAI();
    }

    public void send_spawnAI() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("spawnAI", TMessageType.CALL, seqid_));
      spawnAI_args args = new spawnAI_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_spawnAI() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      spawnAI_result result = new spawnAI_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("registerClient", new registerClient());
      processMap_.put("join", new join());
      processMap_.put("isMyTurn", new isMyTurn());
      processMap_.put("placePiece", new placePiece());
      processMap_.put("attack", new attack());
      processMap_.put("getOpponentsLastAttack", new getOpponentsLastAttack());
      processMap_.put("winGame", new winGame());
      processMap_.put("spawnAI", new spawnAI());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class registerClient implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerClient_args args = new registerClient_args();
        args.read(iprot);
        iprot.readMessageEnd();
        registerClient_result result = new registerClient_result();
        result.success = iface_.registerClient(args.email);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("registerClient", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class join implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        join_args args = new join_args();
        args.read(iprot);
        iprot.readMessageEnd();
        join_result result = new join_result();
        try {
          result.success = iface_.join(args.gameID, args.email);
          result.__isset.success = true;
        } catch (DuplicateEmailException dee) {
          result.dee = dee;
        }
        oprot.writeMessageBegin(new TMessage("join", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isMyTurn implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isMyTurn_args args = new isMyTurn_args();
        args.read(iprot);
        iprot.readMessageEnd();
        isMyTurn_result result = new isMyTurn_result();
        try {
          result.success = iface_.isMyTurn();
          result.__isset.success = true;
        } catch (GameOverException goe) {
          result.goe = goe;
        } catch (UnregisteredException ue) {
          result.ue = ue;
        }
        oprot.writeMessageBegin(new TMessage("isMyTurn", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class placePiece implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        placePiece_args args = new placePiece_args();
        args.read(iprot);
        iprot.readMessageEnd();
        placePiece_result result = new placePiece_result();
        try {
          result.success = iface_.placePiece(args.piece, args.coord, args.horizontal);
          result.__isset.success = true;
        } catch (UnregisteredException ue) {
          result.ue = ue;
        }
        oprot.writeMessageBegin(new TMessage("placePiece", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class attack implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        attack_args args = new attack_args();
        args.read(iprot);
        iprot.readMessageEnd();
        attack_result result = new attack_result();
        try {
          result.success = iface_.attack(args.coord);
          result.__isset.success = true;
        } catch (GameOverException goe) {
          result.goe = goe;
        } catch (UnregisteredException ue) {
          result.ue = ue;
        }
        oprot.writeMessageBegin(new TMessage("attack", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getOpponentsLastAttack implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getOpponentsLastAttack_args args = new getOpponentsLastAttack_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getOpponentsLastAttack_result result = new getOpponentsLastAttack_result();
        try {
          result.success = iface_.getOpponentsLastAttack();
        } catch (NoMovesMadeException nmme) {
          result.nmme = nmme;
        } catch (UnregisteredException ue) {
          result.ue = ue;
        }
        oprot.writeMessageBegin(new TMessage("getOpponentsLastAttack", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class winGame implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        winGame_args args = new winGame_args();
        args.read(iprot);
        iprot.readMessageEnd();
        winGame_result result = new winGame_result();
        try {
          result.success = iface_.winGame();
        } catch (UnregisteredException ue) {
          result.ue = ue;
        }
        oprot.writeMessageBegin(new TMessage("winGame", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class spawnAI implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        spawnAI_args args = new spawnAI_args();
        args.read(iprot);
        iprot.readMessageEnd();
        spawnAI_result result = new spawnAI_result();
        iface_.spawnAI();
        oprot.writeMessageBegin(new TMessage("spawnAI", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class registerClient_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerClient_args");
    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)1);

    public String email;
    public static final int EMAIL = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(EMAIL, new FieldMetaData("email", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(registerClient_args.class, metaDataMap);
    }

    public registerClient_args() {
    }

    public registerClient_args(
      String email)
    {
      this();
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerClient_args(registerClient_args other) {
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    @Override
    public registerClient_args clone() {
      return new registerClient_args(this);
    }

    public String getEmail() {
      return this.email;
    }

    public void setEmail(String email) {
      this.email = email;
    }

    public void unsetEmail() {
      this.email = null;
    }

    // Returns true if field email is set (has been asigned a value) and false otherwise
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case EMAIL:
        return getEmail();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case EMAIL:
        return isSetEmail();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerClient_args)
        return this.equals((registerClient_args)that);
      return false;
    }

    public boolean equals(registerClient_args that) {
      if (that == null)
        return false;

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case EMAIL:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerClient_args(");
      boolean first = true;

      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class registerClient_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("registerClient_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);

    public int success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(registerClient_result.class, metaDataMap);
    }

    public registerClient_result() {
    }

    public registerClient_result(
      int success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerClient_result(registerClient_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
    }

    @Override
    public registerClient_result clone() {
      return new registerClient_result(this);
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public void setSuccessIsSet(boolean value) {
      this.__isset.success = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Integer(getSuccess());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerClient_result)
        return this.equals((registerClient_result)that);
      return false;
    }

    public boolean equals(registerClient_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerClient_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class join_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("join_args");
    private static final TField GAME_ID_FIELD_DESC = new TField("gameID", TType.I32, (short)1);
    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)2);

    public int gameID;
    public static final int GAMEID = 1;
    public String email;
    public static final int EMAIL = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean gameID = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(GAMEID, new FieldMetaData("gameID", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(EMAIL, new FieldMetaData("email", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(join_args.class, metaDataMap);
    }

    public join_args() {
    }

    public join_args(
      int gameID,
      String email)
    {
      this();
      this.gameID = gameID;
      this.__isset.gameID = true;
      this.email = email;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_args(join_args other) {
      __isset.gameID = other.__isset.gameID;
      this.gameID = other.gameID;
      if (other.isSetEmail()) {
        this.email = other.email;
      }
    }

    @Override
    public join_args clone() {
      return new join_args(this);
    }

    public int getGameID() {
      return this.gameID;
    }

    public void setGameID(int gameID) {
      this.gameID = gameID;
      this.__isset.gameID = true;
    }

    public void unsetGameID() {
      this.__isset.gameID = false;
    }

    // Returns true if field gameID is set (has been asigned a value) and false otherwise
    public boolean isSetGameID() {
      return this.__isset.gameID;
    }

    public void setGameIDIsSet(boolean value) {
      this.__isset.gameID = value;
    }

    public String getEmail() {
      return this.email;
    }

    public void setEmail(String email) {
      this.email = email;
    }

    public void unsetEmail() {
      this.email = null;
    }

    // Returns true if field email is set (has been asigned a value) and false otherwise
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case GAMEID:
        if (value == null) {
          unsetGameID();
        } else {
          setGameID((Integer)value);
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          setEmail((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case GAMEID:
        return new Integer(getGameID());

      case EMAIL:
        return getEmail();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case GAMEID:
        return isSetGameID();
      case EMAIL:
        return isSetEmail();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_args)
        return this.equals((join_args)that);
      return false;
    }

    public boolean equals(join_args that) {
      if (that == null)
        return false;

      boolean this_present_gameID = true;
      boolean that_present_gameID = true;
      if (this_present_gameID || that_present_gameID) {
        if (!(this_present_gameID && that_present_gameID))
          return false;
        if (this.gameID != that.gameID)
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case GAMEID:
            if (field.type == TType.I32) {
              this.gameID = iprot.readI32();
              this.__isset.gameID = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EMAIL:
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
      oprot.writeI32(this.gameID);
      oprot.writeFieldEnd();
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_args(");
      boolean first = true;

      sb.append("gameID:");
      sb.append(this.gameID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class join_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("join_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField DEE_FIELD_DESC = new TField("dee", TType.STRUCT, (short)1);

    public boolean success;
    public static final int SUCCESS = 0;
    public DuplicateEmailException dee;
    public static final int DEE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(DEE, new FieldMetaData("dee", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(join_result.class, metaDataMap);
    }

    public join_result() {
    }

    public join_result(
      boolean success,
      DuplicateEmailException dee)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.dee = dee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public join_result(join_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetDee()) {
        this.dee = new DuplicateEmailException(other.dee);
      }
    }

    @Override
    public join_result clone() {
      return new join_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public void setSuccessIsSet(boolean value) {
      this.__isset.success = value;
    }

    public DuplicateEmailException getDee() {
      return this.dee;
    }

    public void setDee(DuplicateEmailException dee) {
      this.dee = dee;
    }

    public void unsetDee() {
      this.dee = null;
    }

    // Returns true if field dee is set (has been asigned a value) and false otherwise
    public boolean isSetDee() {
      return this.dee != null;
    }

    public void setDeeIsSet(boolean value) {
      if (!value) {
        this.dee = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case DEE:
        if (value == null) {
          unsetDee();
        } else {
          setDee((DuplicateEmailException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case DEE:
        return getDee();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case DEE:
        return isSetDee();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof join_result)
        return this.equals((join_result)that);
      return false;
    }

    public boolean equals(join_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_dee = true && this.isSetDee();
      boolean that_present_dee = true && that.isSetDee();
      if (this_present_dee || that_present_dee) {
        if (!(this_present_dee && that_present_dee))
          return false;
        if (!this.dee.equals(that.dee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEE:
            if (field.type == TType.STRUCT) {
              this.dee = new DuplicateEmailException();
              this.dee.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetDee()) {
        oprot.writeFieldBegin(DEE_FIELD_DESC);
        this.dee.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("join_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dee:");
      if (this.dee == null) {
        sb.append("null");
      } else {
        sb.append(this.dee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class isMyTurn_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isMyTurn_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(isMyTurn_args.class, metaDataMap);
    }

    public isMyTurn_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMyTurn_args(isMyTurn_args other) {
    }

    @Override
    public isMyTurn_args clone() {
      return new isMyTurn_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMyTurn_args)
        return this.equals((isMyTurn_args)that);
      return false;
    }

    public boolean equals(isMyTurn_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMyTurn_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class isMyTurn_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("isMyTurn_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField GOE_FIELD_DESC = new TField("goe", TType.STRUCT, (short)1);
    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);

    public boolean success;
    public static final int SUCCESS = 0;
    public GameOverException goe;
    public static final int GOE = 1;
    public UnregisteredException ue;
    public static final int UE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(GOE, new FieldMetaData("goe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(isMyTurn_result.class, metaDataMap);
    }

    public isMyTurn_result() {
    }

    public isMyTurn_result(
      boolean success,
      GameOverException goe,
      UnregisteredException ue)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.goe = goe;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMyTurn_result(isMyTurn_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetGoe()) {
        this.goe = new GameOverException(other.goe);
      }
      if (other.isSetUe()) {
        this.ue = new UnregisteredException(other.ue);
      }
    }

    @Override
    public isMyTurn_result clone() {
      return new isMyTurn_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public void setSuccessIsSet(boolean value) {
      this.__isset.success = value;
    }

    public GameOverException getGoe() {
      return this.goe;
    }

    public void setGoe(GameOverException goe) {
      this.goe = goe;
    }

    public void unsetGoe() {
      this.goe = null;
    }

    // Returns true if field goe is set (has been asigned a value) and false otherwise
    public boolean isSetGoe() {
      return this.goe != null;
    }

    public void setGoeIsSet(boolean value) {
      if (!value) {
        this.goe = null;
      }
    }

    public UnregisteredException getUe() {
      return this.ue;
    }

    public void setUe(UnregisteredException ue) {
      this.ue = ue;
    }

    public void unsetUe() {
      this.ue = null;
    }

    // Returns true if field ue is set (has been asigned a value) and false otherwise
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case GOE:
        if (value == null) {
          unsetGoe();
        } else {
          setGoe((GameOverException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnregisteredException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case GOE:
        return getGoe();

      case UE:
        return getUe();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case GOE:
        return isSetGoe();
      case UE:
        return isSetUe();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMyTurn_result)
        return this.equals((isMyTurn_result)that);
      return false;
    }

    public boolean equals(isMyTurn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_goe = true && this.isSetGoe();
      boolean that_present_goe = true && that.isSetGoe();
      if (this_present_goe || that_present_goe) {
        if (!(this_present_goe && that_present_goe))
          return false;
        if (!this.goe.equals(that.goe))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case GOE:
            if (field.type == TType.STRUCT) {
              this.goe = new GameOverException();
              this.goe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UE:
            if (field.type == TType.STRUCT) {
              this.ue = new UnregisteredException();
              this.ue.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetGoe()) {
        oprot.writeFieldBegin(GOE_FIELD_DESC);
        this.goe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMyTurn_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("goe:");
      if (this.goe == null) {
        sb.append("null");
      } else {
        sb.append(this.goe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class placePiece_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("placePiece_args");
    private static final TField PIECE_FIELD_DESC = new TField("piece", TType.I32, (short)1);
    private static final TField COORD_FIELD_DESC = new TField("coord", TType.STRUCT, (short)2);
    private static final TField HORIZONTAL_FIELD_DESC = new TField("horizontal", TType.BOOL, (short)3);

    public int piece;
    public static final int PIECE = 1;
    public Coordinate coord;
    public static final int COORD = 2;
    public boolean horizontal;
    public static final int HORIZONTAL = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean piece = false;
      public boolean horizontal = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(PIECE, new FieldMetaData("piece", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(COORD, new FieldMetaData("coord", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Coordinate.class)));
      put(HORIZONTAL, new FieldMetaData("horizontal", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(placePiece_args.class, metaDataMap);
    }

    public placePiece_args() {
    }

    public placePiece_args(
      int piece,
      Coordinate coord,
      boolean horizontal)
    {
      this();
      this.piece = piece;
      this.__isset.piece = true;
      this.coord = coord;
      this.horizontal = horizontal;
      this.__isset.horizontal = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public placePiece_args(placePiece_args other) {
      __isset.piece = other.__isset.piece;
      this.piece = other.piece;
      if (other.isSetCoord()) {
        this.coord = new Coordinate(other.coord);
      }
      __isset.horizontal = other.__isset.horizontal;
      this.horizontal = other.horizontal;
    }

    @Override
    public placePiece_args clone() {
      return new placePiece_args(this);
    }

    public int getPiece() {
      return this.piece;
    }

    public void setPiece(int piece) {
      this.piece = piece;
      this.__isset.piece = true;
    }

    public void unsetPiece() {
      this.__isset.piece = false;
    }

    // Returns true if field piece is set (has been asigned a value) and false otherwise
    public boolean isSetPiece() {
      return this.__isset.piece;
    }

    public void setPieceIsSet(boolean value) {
      this.__isset.piece = value;
    }

    public Coordinate getCoord() {
      return this.coord;
    }

    public void setCoord(Coordinate coord) {
      this.coord = coord;
    }

    public void unsetCoord() {
      this.coord = null;
    }

    // Returns true if field coord is set (has been asigned a value) and false otherwise
    public boolean isSetCoord() {
      return this.coord != null;
    }

    public void setCoordIsSet(boolean value) {
      if (!value) {
        this.coord = null;
      }
    }

    public boolean isHorizontal() {
      return this.horizontal;
    }

    public void setHorizontal(boolean horizontal) {
      this.horizontal = horizontal;
      this.__isset.horizontal = true;
    }

    public void unsetHorizontal() {
      this.__isset.horizontal = false;
    }

    // Returns true if field horizontal is set (has been asigned a value) and false otherwise
    public boolean isSetHorizontal() {
      return this.__isset.horizontal;
    }

    public void setHorizontalIsSet(boolean value) {
      this.__isset.horizontal = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case PIECE:
        if (value == null) {
          unsetPiece();
        } else {
          setPiece((Integer)value);
        }
        break;

      case COORD:
        if (value == null) {
          unsetCoord();
        } else {
          setCoord((Coordinate)value);
        }
        break;

      case HORIZONTAL:
        if (value == null) {
          unsetHorizontal();
        } else {
          setHorizontal((Boolean)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case PIECE:
        return new Integer(getPiece());

      case COORD:
        return getCoord();

      case HORIZONTAL:
        return new Boolean(isHorizontal());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case PIECE:
        return isSetPiece();
      case COORD:
        return isSetCoord();
      case HORIZONTAL:
        return isSetHorizontal();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof placePiece_args)
        return this.equals((placePiece_args)that);
      return false;
    }

    public boolean equals(placePiece_args that) {
      if (that == null)
        return false;

      boolean this_present_piece = true;
      boolean that_present_piece = true;
      if (this_present_piece || that_present_piece) {
        if (!(this_present_piece && that_present_piece))
          return false;
        if (this.piece != that.piece)
          return false;
      }

      boolean this_present_coord = true && this.isSetCoord();
      boolean that_present_coord = true && that.isSetCoord();
      if (this_present_coord || that_present_coord) {
        if (!(this_present_coord && that_present_coord))
          return false;
        if (!this.coord.equals(that.coord))
          return false;
      }

      boolean this_present_horizontal = true;
      boolean that_present_horizontal = true;
      if (this_present_horizontal || that_present_horizontal) {
        if (!(this_present_horizontal && that_present_horizontal))
          return false;
        if (this.horizontal != that.horizontal)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case PIECE:
            if (field.type == TType.I32) {
              this.piece = iprot.readI32();
              this.__isset.piece = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COORD:
            if (field.type == TType.STRUCT) {
              this.coord = new Coordinate();
              this.coord.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case HORIZONTAL:
            if (field.type == TType.BOOL) {
              this.horizontal = iprot.readBool();
              this.__isset.horizontal = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PIECE_FIELD_DESC);
      oprot.writeI32(this.piece);
      oprot.writeFieldEnd();
      if (this.coord != null) {
        oprot.writeFieldBegin(COORD_FIELD_DESC);
        this.coord.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HORIZONTAL_FIELD_DESC);
      oprot.writeBool(this.horizontal);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("placePiece_args(");
      boolean first = true;

      sb.append("piece:");
      sb.append(this.piece);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("horizontal:");
      sb.append(this.horizontal);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class placePiece_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("placePiece_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)1);

    public boolean success;
    public static final int SUCCESS = 0;
    public UnregisteredException ue;
    public static final int UE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL)));
      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(placePiece_result.class, metaDataMap);
    }

    public placePiece_result() {
    }

    public placePiece_result(
      boolean success,
      UnregisteredException ue)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public placePiece_result(placePiece_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetUe()) {
        this.ue = new UnregisteredException(other.ue);
      }
    }

    @Override
    public placePiece_result clone() {
      return new placePiece_result(this);
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public void setSuccessIsSet(boolean value) {
      this.__isset.success = value;
    }

    public UnregisteredException getUe() {
      return this.ue;
    }

    public void setUe(UnregisteredException ue) {
      this.ue = ue;
    }

    public void unsetUe() {
      this.ue = null;
    }

    // Returns true if field ue is set (has been asigned a value) and false otherwise
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnregisteredException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return new Boolean(isSuccess());

      case UE:
        return getUe();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof placePiece_result)
        return this.equals((placePiece_result)that);
      return false;
    }

    public boolean equals(placePiece_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UE:
            if (field.type == TType.STRUCT) {
              this.ue = new UnregisteredException();
              this.ue.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("placePiece_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class attack_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("attack_args");
    private static final TField COORD_FIELD_DESC = new TField("coord", TType.STRUCT, (short)1);

    public Coordinate coord;
    public static final int COORD = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(COORD, new FieldMetaData("coord", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Coordinate.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(attack_args.class, metaDataMap);
    }

    public attack_args() {
    }

    public attack_args(
      Coordinate coord)
    {
      this();
      this.coord = coord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attack_args(attack_args other) {
      if (other.isSetCoord()) {
        this.coord = new Coordinate(other.coord);
      }
    }

    @Override
    public attack_args clone() {
      return new attack_args(this);
    }

    public Coordinate getCoord() {
      return this.coord;
    }

    public void setCoord(Coordinate coord) {
      this.coord = coord;
    }

    public void unsetCoord() {
      this.coord = null;
    }

    // Returns true if field coord is set (has been asigned a value) and false otherwise
    public boolean isSetCoord() {
      return this.coord != null;
    }

    public void setCoordIsSet(boolean value) {
      if (!value) {
        this.coord = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case COORD:
        if (value == null) {
          unsetCoord();
        } else {
          setCoord((Coordinate)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case COORD:
        return getCoord();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case COORD:
        return isSetCoord();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof attack_args)
        return this.equals((attack_args)that);
      return false;
    }

    public boolean equals(attack_args that) {
      if (that == null)
        return false;

      boolean this_present_coord = true && this.isSetCoord();
      boolean that_present_coord = true && that.isSetCoord();
      if (this_present_coord || that_present_coord) {
        if (!(this_present_coord && that_present_coord))
          return false;
        if (!this.coord.equals(that.coord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case COORD:
            if (field.type == TType.STRUCT) {
              this.coord = new Coordinate();
              this.coord.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.coord != null) {
        oprot.writeFieldBegin(COORD_FIELD_DESC);
        this.coord.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("attack_args(");
      boolean first = true;

      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class attack_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("attack_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField GOE_FIELD_DESC = new TField("goe", TType.STRUCT, (short)1);
    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);

    public int success;
    public static final int SUCCESS = 0;
    public GameOverException goe;
    public static final int GOE = 1;
    public UnregisteredException ue;
    public static final int UE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean success = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(GOE, new FieldMetaData("goe", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(attack_result.class, metaDataMap);
    }

    public attack_result() {
    }

    public attack_result(
      int success,
      GameOverException goe,
      UnregisteredException ue)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.goe = goe;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attack_result(attack_result other) {
      __isset.success = other.__isset.success;
      this.success = other.success;
      if (other.isSetGoe()) {
        this.goe = new GameOverException(other.goe);
      }
      if (other.isSetUe()) {
        this.ue = new UnregisteredException(other.ue);
      }
    }

    @Override
    public attack_result clone() {
      return new attack_result(this);
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.__isset.success;
    }

    public void setSuccessIsSet(boolean value) {
      this.__isset.success = value;
    }

    public GameOverException getGoe() {
      return this.goe;
    }

    public void setGoe(GameOverException goe) {
      this.goe = goe;
    }

    public void unsetGoe() {
      this.goe = null;
    }

    // Returns true if field goe is set (has been asigned a value) and false otherwise
    public boolean isSetGoe() {
      return this.goe != null;
    }

    public void setGoeIsSet(boolean value) {
      if (!value) {
        this.goe = null;
      }
    }

    public UnregisteredException getUe() {
      return this.ue;
    }

    public void setUe(UnregisteredException ue) {
      this.ue = ue;
    }

    public void unsetUe() {
      this.ue = null;
    }

    // Returns true if field ue is set (has been asigned a value) and false otherwise
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case GOE:
        if (value == null) {
          unsetGoe();
        } else {
          setGoe((GameOverException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnregisteredException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case GOE:
        return getGoe();

      case UE:
        return getUe();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case GOE:
        return isSetGoe();
      case UE:
        return isSetUe();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof attack_result)
        return this.equals((attack_result)that);
      return false;
    }

    public boolean equals(attack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_goe = true && this.isSetGoe();
      boolean that_present_goe = true && that.isSetGoe();
      if (this_present_goe || that_present_goe) {
        if (!(this_present_goe && that_present_goe))
          return false;
        if (!this.goe.equals(that.goe))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case GOE:
            if (field.type == TType.STRUCT) {
              this.goe = new GameOverException();
              this.goe.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UE:
            if (field.type == TType.STRUCT) {
              this.ue = new UnregisteredException();
              this.ue.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetGoe()) {
        oprot.writeFieldBegin(GOE_FIELD_DESC);
        this.goe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("attack_result(");
      boolean first = true;

      sb.append("success:");
      String success_name = AttackResult.VALUES_TO_NAMES.get(this.success);
      if (success_name != null) {
        sb.append(success_name);
        sb.append(" (");
      }
      sb.append(this.success);
      if (success_name != null) {
        sb.append(")");
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("goe:");
      if (this.goe == null) {
        sb.append("null");
      } else {
        sb.append(this.goe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
      if (isSetSuccess() && !AttackResult.VALID_VALUES.contains(success)){
        throw new TProtocolException("The field 'success' has been assigned the invalid value " + success);
      }
    }

  }

  public static class getOpponentsLastAttack_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getOpponentsLastAttack_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getOpponentsLastAttack_args.class, metaDataMap);
    }

    public getOpponentsLastAttack_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpponentsLastAttack_args(getOpponentsLastAttack_args other) {
    }

    @Override
    public getOpponentsLastAttack_args clone() {
      return new getOpponentsLastAttack_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpponentsLastAttack_args)
        return this.equals((getOpponentsLastAttack_args)that);
      return false;
    }

    public boolean equals(getOpponentsLastAttack_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpponentsLastAttack_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class getOpponentsLastAttack_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getOpponentsLastAttack_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField NMME_FIELD_DESC = new TField("nmme", TType.STRUCT, (short)1);
    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);

    public Coordinate success;
    public static final int SUCCESS = 0;
    public NoMovesMadeException nmme;
    public static final int NMME = 1;
    public UnregisteredException ue;
    public static final int UE = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Coordinate.class)));
      put(NMME, new FieldMetaData("nmme", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(getOpponentsLastAttack_result.class, metaDataMap);
    }

    public getOpponentsLastAttack_result() {
    }

    public getOpponentsLastAttack_result(
      Coordinate success,
      NoMovesMadeException nmme,
      UnregisteredException ue)
    {
      this();
      this.success = success;
      this.nmme = nmme;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOpponentsLastAttack_result(getOpponentsLastAttack_result other) {
      if (other.isSetSuccess()) {
        this.success = new Coordinate(other.success);
      }
      if (other.isSetNmme()) {
        this.nmme = new NoMovesMadeException(other.nmme);
      }
      if (other.isSetUe()) {
        this.ue = new UnregisteredException(other.ue);
      }
    }

    @Override
    public getOpponentsLastAttack_result clone() {
      return new getOpponentsLastAttack_result(this);
    }

    public Coordinate getSuccess() {
      return this.success;
    }

    public void setSuccess(Coordinate success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NoMovesMadeException getNmme() {
      return this.nmme;
    }

    public void setNmme(NoMovesMadeException nmme) {
      this.nmme = nmme;
    }

    public void unsetNmme() {
      this.nmme = null;
    }

    // Returns true if field nmme is set (has been asigned a value) and false otherwise
    public boolean isSetNmme() {
      return this.nmme != null;
    }

    public void setNmmeIsSet(boolean value) {
      if (!value) {
        this.nmme = null;
      }
    }

    public UnregisteredException getUe() {
      return this.ue;
    }

    public void setUe(UnregisteredException ue) {
      this.ue = ue;
    }

    public void unsetUe() {
      this.ue = null;
    }

    // Returns true if field ue is set (has been asigned a value) and false otherwise
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Coordinate)value);
        }
        break;

      case NMME:
        if (value == null) {
          unsetNmme();
        } else {
          setNmme((NoMovesMadeException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnregisteredException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case NMME:
        return getNmme();

      case UE:
        return getUe();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case NMME:
        return isSetNmme();
      case UE:
        return isSetUe();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOpponentsLastAttack_result)
        return this.equals((getOpponentsLastAttack_result)that);
      return false;
    }

    public boolean equals(getOpponentsLastAttack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_nmme = true && this.isSetNmme();
      boolean that_present_nmme = true && that.isSetNmme();
      if (this_present_nmme || that_present_nmme) {
        if (!(this_present_nmme && that_present_nmme))
          return false;
        if (!this.nmme.equals(that.nmme))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new Coordinate();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NMME:
            if (field.type == TType.STRUCT) {
              this.nmme = new NoMovesMadeException();
              this.nmme.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UE:
            if (field.type == TType.STRUCT) {
              this.ue = new UnregisteredException();
              this.ue.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNmme()) {
        oprot.writeFieldBegin(NMME_FIELD_DESC);
        this.nmme.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOpponentsLastAttack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nmme:");
      if (this.nmme == null) {
        sb.append("null");
      } else {
        sb.append(this.nmme);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class winGame_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("winGame_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(winGame_args.class, metaDataMap);
    }

    public winGame_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public winGame_args(winGame_args other) {
    }

    @Override
    public winGame_args clone() {
      return new winGame_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof winGame_args)
        return this.equals((winGame_args)that);
      return false;
    }

    public boolean equals(winGame_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("winGame_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class winGame_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("winGame_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)1);

    public String success;
    public static final int SUCCESS = 0;
    public UnregisteredException ue;
    public static final int UE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(winGame_result.class, metaDataMap);
    }

    public winGame_result() {
    }

    public winGame_result(
      String success,
      UnregisteredException ue)
    {
      this();
      this.success = success;
      this.ue = ue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public winGame_result(winGame_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUe()) {
        this.ue = new UnregisteredException(other.ue);
      }
    }

    @Override
    public winGame_result clone() {
      return new winGame_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnregisteredException getUe() {
      return this.ue;
    }

    public void setUe(UnregisteredException ue) {
      this.ue = ue;
    }

    public void unsetUe() {
      this.ue = null;
    }

    // Returns true if field ue is set (has been asigned a value) and false otherwise
    public boolean isSetUe() {
      return this.ue != null;
    }

    public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnregisteredException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case UE:
        return getUe();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case UE:
        return isSetUe();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof winGame_result)
        return this.equals((winGame_result)that);
      return false;
    }

    public boolean equals(winGame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UE:
            if (field.type == TType.STRUCT) {
              this.ue = new UnregisteredException();
              this.ue.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("winGame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class spawnAI_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("spawnAI_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(spawnAI_args.class, metaDataMap);
    }

    public spawnAI_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public spawnAI_args(spawnAI_args other) {
    }

    @Override
    public spawnAI_args clone() {
      return new spawnAI_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof spawnAI_args)
        return this.equals((spawnAI_args)that);
      return false;
    }

    public boolean equals(spawnAI_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("spawnAI_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class spawnAI_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("spawnAI_result");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(spawnAI_result.class, metaDataMap);
    }

    public spawnAI_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public spawnAI_result(spawnAI_result other) {
    }

    @Override
    public spawnAI_result clone() {
      return new spawnAI_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof spawnAI_result)
        return this.equals((spawnAI_result)that);
      return false;
    }

    public boolean equals(spawnAI_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("spawnAI_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
