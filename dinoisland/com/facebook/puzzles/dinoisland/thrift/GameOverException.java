/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.puzzles.dinoisland.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Game over exception
 * 
 * This exception is thrown if a client attempts to call an action function,
 * but the species has already died out, either due to having all of the
 * dinosaurs die of natural causes or due to the species time limit being
 * reached. The wonGame field will be true if your species scored high enough
 * to win the game. The score field will provide your total score. The message
 * field will contain instructions for how to get credit for winning the game
 * if your species scored high enough to win, and will also contain the reason
 * your species went extinct. The highScoreTable field will contain the top 10
 * high scores since the server was started. Note that the highScoreTable
 * does not list dinosaur species names, instead it users the chosen
 * highScoreNames provided by each puzzler's registerClient() call to register
 * their species.
 */
public class GameOverException extends Exception implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("GameOverException");
  private static final TField WON_GAME_FIELD_DESC = new TField("wonGame", TType.BOOL, (short)1);
  private static final TField SCORE_FIELD_DESC = new TField("score", TType.I32, (short)2);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)3);
  private static final TField HIGH_SCORE_TABLE_FIELD_DESC = new TField("highScoreTable", TType.STRING, (short)4);

  public boolean wonGame;
  public static final int WONGAME = 1;
  public int score;
  public static final int SCORE = 2;
  public String message;
  public static final int MESSAGE = 3;
  public String highScoreTable;
  public static final int HIGHSCORETABLE = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean wonGame = false;
    public boolean score = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(WONGAME, new FieldMetaData("wonGame", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(SCORE, new FieldMetaData("score", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(HIGHSCORETABLE, new FieldMetaData("highScoreTable", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(GameOverException.class, metaDataMap);
  }

  public GameOverException() {
  }

  public GameOverException(
    boolean wonGame,
    int score,
    String message,
    String highScoreTable)
  {
    this();
    this.wonGame = wonGame;
    this.__isset.wonGame = true;
    this.score = score;
    this.__isset.score = true;
    this.message = message;
    this.highScoreTable = highScoreTable;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GameOverException(GameOverException other) {
    __isset.wonGame = other.__isset.wonGame;
    this.wonGame = other.wonGame;
    __isset.score = other.__isset.score;
    this.score = other.score;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetHighScoreTable()) {
      this.highScoreTable = other.highScoreTable;
    }
  }

  @Override
  public GameOverException clone() {
    return new GameOverException(this);
  }

  public boolean isWonGame() {
    return this.wonGame;
  }

  public void setWonGame(boolean wonGame) {
    this.wonGame = wonGame;
    this.__isset.wonGame = true;
  }

  public void unsetWonGame() {
    this.__isset.wonGame = false;
  }

  // Returns true if field wonGame is set (has been asigned a value) and false otherwise
  public boolean isSetWonGame() {
    return this.__isset.wonGame;
  }

  public void setWonGameIsSet(boolean value) {
    this.__isset.wonGame = value;
  }

  public int getScore() {
    return this.score;
  }

  public void setScore(int score) {
    this.score = score;
    this.__isset.score = true;
  }

  public void unsetScore() {
    this.__isset.score = false;
  }

  // Returns true if field score is set (has been asigned a value) and false otherwise
  public boolean isSetScore() {
    return this.__isset.score;
  }

  public void setScoreIsSet(boolean value) {
    this.__isset.score = value;
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  // Returns true if field message is set (has been asigned a value) and false otherwise
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getHighScoreTable() {
    return this.highScoreTable;
  }

  public void setHighScoreTable(String highScoreTable) {
    this.highScoreTable = highScoreTable;
  }

  public void unsetHighScoreTable() {
    this.highScoreTable = null;
  }

  // Returns true if field highScoreTable is set (has been asigned a value) and false otherwise
  public boolean isSetHighScoreTable() {
    return this.highScoreTable != null;
  }

  public void setHighScoreTableIsSet(boolean value) {
    if (!value) {
      this.highScoreTable = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case WONGAME:
      if (value == null) {
        unsetWonGame();
      } else {
        setWonGame((Boolean)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case HIGHSCORETABLE:
      if (value == null) {
        unsetHighScoreTable();
      } else {
        setHighScoreTable((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case WONGAME:
      return new Boolean(isWonGame());

    case SCORE:
      return new Integer(getScore());

    case MESSAGE:
      return getMessage();

    case HIGHSCORETABLE:
      return getHighScoreTable();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case WONGAME:
      return isSetWonGame();
    case SCORE:
      return isSetScore();
    case MESSAGE:
      return isSetMessage();
    case HIGHSCORETABLE:
      return isSetHighScoreTable();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GameOverException)
      return this.equals((GameOverException)that);
    return false;
  }

  public boolean equals(GameOverException that) {
    if (that == null)
      return false;

    boolean this_present_wonGame = true;
    boolean that_present_wonGame = true;
    if (this_present_wonGame || that_present_wonGame) {
      if (!(this_present_wonGame && that_present_wonGame))
        return false;
      if (this.wonGame != that.wonGame)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_highScoreTable = true && this.isSetHighScoreTable();
    boolean that_present_highScoreTable = true && that.isSetHighScoreTable();
    if (this_present_highScoreTable || that_present_highScoreTable) {
      if (!(this_present_highScoreTable && that_present_highScoreTable))
        return false;
      if (!this.highScoreTable.equals(that.highScoreTable))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case WONGAME:
          if (field.type == TType.BOOL) {
            this.wonGame = iprot.readBool();
            this.__isset.wonGame = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SCORE:
          if (field.type == TType.I32) {
            this.score = iprot.readI32();
            this.__isset.score = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGE:
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HIGHSCORETABLE:
          if (field.type == TType.STRING) {
            this.highScoreTable = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(WON_GAME_FIELD_DESC);
    oprot.writeBool(this.wonGame);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SCORE_FIELD_DESC);
    oprot.writeI32(this.score);
    oprot.writeFieldEnd();
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    if (this.highScoreTable != null) {
      oprot.writeFieldBegin(HIGH_SCORE_TABLE_FIELD_DESC);
      oprot.writeString(this.highScoreTable);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GameOverException(");
    boolean first = true;

    sb.append("wonGame:");
    sb.append(this.wonGame);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highScoreTable:");
    if (this.highScoreTable == null) {
      sb.append("null");
    } else {
      sb.append(this.highScoreTable);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

