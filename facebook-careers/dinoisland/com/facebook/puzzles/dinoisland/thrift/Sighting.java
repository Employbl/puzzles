/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.puzzles.dinoisland.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Sighting struct
 * 
 * This structure represents your dinosaur sighting something interesting, be
 * it plants to eat, dinosaurs to eat, or fearsome carnivores to avoid. Lastly,
 * this struct is also used to tell your dinosaur when it sees impassable
 * terrain.
 * 
 * Each sighting includes coordinates of the sighting (coordinates are always
 * relative to your own dinosaur's position), what kind of entity was spotted,
 * as well as the species string and what size the entity is. In the case of
 * impassable terrain, species will be blank and size will be 0.
 */
public class Sighting implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Sighting");
  private static final TField COORDINATE_FIELD_DESC = new TField("coordinate", TType.STRUCT, (short)1);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)2);
  private static final TField SPECIES_FIELD_DESC = new TField("species", TType.STRING, (short)3);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)4);

  public Coordinate coordinate;
  public static final int COORDINATE = 1;
  public int type;
  public static final int TYPE = 2;
  public String species;
  public static final int SPECIES = 3;
  public int size;
  public static final int SIZE = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean type = false;
    public boolean size = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(COORDINATE, new FieldMetaData("coordinate", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Coordinate.class)));
    put(TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SPECIES, new FieldMetaData("species", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(SIZE, new FieldMetaData("size", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Sighting.class, metaDataMap);
  }

  public Sighting() {
  }

  public Sighting(
    Coordinate coordinate,
    int type,
    String species,
    int size)
  {
    this();
    this.coordinate = coordinate;
    this.type = type;
    this.__isset.type = true;
    this.species = species;
    this.size = size;
    this.__isset.size = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sighting(Sighting other) {
    if (other.isSetCoordinate()) {
      this.coordinate = new Coordinate(other.coordinate);
    }
    __isset.type = other.__isset.type;
    this.type = other.type;
    if (other.isSetSpecies()) {
      this.species = other.species;
    }
    __isset.size = other.__isset.size;
    this.size = other.size;
  }

  @Override
  public Sighting clone() {
    return new Sighting(this);
  }

  public Coordinate getCoordinate() {
    return this.coordinate;
  }

  public void setCoordinate(Coordinate coordinate) {
    this.coordinate = coordinate;
  }

  public void unsetCoordinate() {
    this.coordinate = null;
  }

  // Returns true if field coordinate is set (has been asigned a value) and false otherwise
  public boolean isSetCoordinate() {
    return this.coordinate != null;
  }

  public void setCoordinateIsSet(boolean value) {
    if (!value) {
      this.coordinate = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public void setType(int type) {
    this.type = type;
    this.__isset.type = true;
  }

  public void unsetType() {
    this.__isset.type = false;
  }

  // Returns true if field type is set (has been asigned a value) and false otherwise
  public boolean isSetType() {
    return this.__isset.type;
  }

  public void setTypeIsSet(boolean value) {
    this.__isset.type = value;
  }

  public String getSpecies() {
    return this.species;
  }

  public void setSpecies(String species) {
    this.species = species;
  }

  public void unsetSpecies() {
    this.species = null;
  }

  // Returns true if field species is set (has been asigned a value) and false otherwise
  public boolean isSetSpecies() {
    return this.species != null;
  }

  public void setSpeciesIsSet(boolean value) {
    if (!value) {
      this.species = null;
    }
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    this.__isset.size = true;
  }

  public void unsetSize() {
    this.__isset.size = false;
  }

  // Returns true if field size is set (has been asigned a value) and false otherwise
  public boolean isSetSize() {
    return this.__isset.size;
  }

  public void setSizeIsSet(boolean value) {
    this.__isset.size = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COORDINATE:
      if (value == null) {
        unsetCoordinate();
      } else {
        setCoordinate((Coordinate)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case SPECIES:
      if (value == null) {
        unsetSpecies();
      } else {
        setSpecies((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COORDINATE:
      return getCoordinate();

    case TYPE:
      return getType();

    case SPECIES:
      return getSpecies();

    case SIZE:
      return new Integer(getSize());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COORDINATE:
      return isSetCoordinate();
    case TYPE:
      return isSetType();
    case SPECIES:
      return isSetSpecies();
    case SIZE:
      return isSetSize();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sighting)
      return this.equals((Sighting)that);
    return false;
  }

  public boolean equals(Sighting that) {
    if (that == null)
      return false;

    boolean this_present_coordinate = true && this.isSetCoordinate();
    boolean that_present_coordinate = true && that.isSetCoordinate();
    if (this_present_coordinate || that_present_coordinate) {
      if (!(this_present_coordinate && that_present_coordinate))
        return false;
      if (!this.coordinate.equals(that.coordinate))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_species = true && this.isSetSpecies();
    boolean that_present_species = true && that.isSetSpecies();
    if (this_present_species || that_present_species) {
      if (!(this_present_species && that_present_species))
        return false;
      if (!this.species.equals(that.species))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COORDINATE:
          if (field.type == TType.STRUCT) {
            this.coordinate = new Coordinate();
            this.coordinate.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset.type = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPECIES:
          if (field.type == TType.STRING) {
            this.species = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIZE:
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            this.__isset.size = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.coordinate != null) {
      oprot.writeFieldBegin(COORDINATE_FIELD_DESC);
      this.coordinate.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.species != null) {
      oprot.writeFieldBegin(SPECIES_FIELD_DESC);
      oprot.writeString(this.species);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI32(this.size);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sighting(");
    boolean first = true;

    sb.append("coordinate:");
    if (this.coordinate == null) {
      sb.append("null");
    } else {
      sb.append(this.coordinate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    String type_name = EntityType.VALUES_TO_NAMES.get(this.type);
    if (type_name != null) {
      sb.append(type_name);
      sb.append(" (");
    }
    sb.append(this.type);
    if (type_name != null) {
      sb.append(")");
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("species:");
    if (this.species == null) {
      sb.append("null");
    } else {
      sb.append(this.species);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !EntityType.VALID_VALUES.contains(type)){
      throw new TProtocolException("The field 'type' has been assigned the invalid value " + type);
    }
  }

}

