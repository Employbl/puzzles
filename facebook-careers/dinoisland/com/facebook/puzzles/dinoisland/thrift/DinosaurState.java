/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.puzzles.dinoisland.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Dinosaur State
 * 
 * This structure contains all pertinent data regarding your dinosaur instance,
 * including its available calories to spend, its current size, and how many
 * calories it will cost to lay an egg, grow one size, look in a direction,
 * and move in a direction.
 */
public class DinosaurState implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DinosaurState");
  private static final TField CALORIES_FIELD_DESC = new TField("calories", TType.I32, (short)1);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)2);
  private static final TField EGG_COST_FIELD_DESC = new TField("eggCost", TType.I32, (short)3);
  private static final TField GROW_COST_FIELD_DESC = new TField("growCost", TType.I32, (short)4);
  private static final TField LOOK_COST_FIELD_DESC = new TField("lookCost", TType.I32, (short)5);
  private static final TField MOVE_COST_FIELD_DESC = new TField("moveCost", TType.I32, (short)6);

  public int calories;
  public static final int CALORIES = 1;
  public int size;
  public static final int SIZE = 2;
  public int eggCost;
  public static final int EGGCOST = 3;
  public int growCost;
  public static final int GROWCOST = 4;
  public int lookCost;
  public static final int LOOKCOST = 5;
  public int moveCost;
  public static final int MOVECOST = 6;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean calories = false;
    public boolean size = false;
    public boolean eggCost = false;
    public boolean growCost = false;
    public boolean lookCost = false;
    public boolean moveCost = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(CALORIES, new FieldMetaData("calories", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SIZE, new FieldMetaData("size", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(EGGCOST, new FieldMetaData("eggCost", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(GROWCOST, new FieldMetaData("growCost", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(LOOKCOST, new FieldMetaData("lookCost", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(MOVECOST, new FieldMetaData("moveCost", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(DinosaurState.class, metaDataMap);
  }

  public DinosaurState() {
  }

  public DinosaurState(
    int calories,
    int size,
    int eggCost,
    int growCost,
    int lookCost,
    int moveCost)
  {
    this();
    this.calories = calories;
    this.__isset.calories = true;
    this.size = size;
    this.__isset.size = true;
    this.eggCost = eggCost;
    this.__isset.eggCost = true;
    this.growCost = growCost;
    this.__isset.growCost = true;
    this.lookCost = lookCost;
    this.__isset.lookCost = true;
    this.moveCost = moveCost;
    this.__isset.moveCost = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DinosaurState(DinosaurState other) {
    __isset.calories = other.__isset.calories;
    this.calories = other.calories;
    __isset.size = other.__isset.size;
    this.size = other.size;
    __isset.eggCost = other.__isset.eggCost;
    this.eggCost = other.eggCost;
    __isset.growCost = other.__isset.growCost;
    this.growCost = other.growCost;
    __isset.lookCost = other.__isset.lookCost;
    this.lookCost = other.lookCost;
    __isset.moveCost = other.__isset.moveCost;
    this.moveCost = other.moveCost;
  }

  @Override
  public DinosaurState clone() {
    return new DinosaurState(this);
  }

  public int getCalories() {
    return this.calories;
  }

  public void setCalories(int calories) {
    this.calories = calories;
    this.__isset.calories = true;
  }

  public void unsetCalories() {
    this.__isset.calories = false;
  }

  // Returns true if field calories is set (has been asigned a value) and false otherwise
  public boolean isSetCalories() {
    return this.__isset.calories;
  }

  public void setCaloriesIsSet(boolean value) {
    this.__isset.calories = value;
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    this.__isset.size = true;
  }

  public void unsetSize() {
    this.__isset.size = false;
  }

  // Returns true if field size is set (has been asigned a value) and false otherwise
  public boolean isSetSize() {
    return this.__isset.size;
  }

  public void setSizeIsSet(boolean value) {
    this.__isset.size = value;
  }

  public int getEggCost() {
    return this.eggCost;
  }

  public void setEggCost(int eggCost) {
    this.eggCost = eggCost;
    this.__isset.eggCost = true;
  }

  public void unsetEggCost() {
    this.__isset.eggCost = false;
  }

  // Returns true if field eggCost is set (has been asigned a value) and false otherwise
  public boolean isSetEggCost() {
    return this.__isset.eggCost;
  }

  public void setEggCostIsSet(boolean value) {
    this.__isset.eggCost = value;
  }

  public int getGrowCost() {
    return this.growCost;
  }

  public void setGrowCost(int growCost) {
    this.growCost = growCost;
    this.__isset.growCost = true;
  }

  public void unsetGrowCost() {
    this.__isset.growCost = false;
  }

  // Returns true if field growCost is set (has been asigned a value) and false otherwise
  public boolean isSetGrowCost() {
    return this.__isset.growCost;
  }

  public void setGrowCostIsSet(boolean value) {
    this.__isset.growCost = value;
  }

  public int getLookCost() {
    return this.lookCost;
  }

  public void setLookCost(int lookCost) {
    this.lookCost = lookCost;
    this.__isset.lookCost = true;
  }

  public void unsetLookCost() {
    this.__isset.lookCost = false;
  }

  // Returns true if field lookCost is set (has been asigned a value) and false otherwise
  public boolean isSetLookCost() {
    return this.__isset.lookCost;
  }

  public void setLookCostIsSet(boolean value) {
    this.__isset.lookCost = value;
  }

  public int getMoveCost() {
    return this.moveCost;
  }

  public void setMoveCost(int moveCost) {
    this.moveCost = moveCost;
    this.__isset.moveCost = true;
  }

  public void unsetMoveCost() {
    this.__isset.moveCost = false;
  }

  // Returns true if field moveCost is set (has been asigned a value) and false otherwise
  public boolean isSetMoveCost() {
    return this.__isset.moveCost;
  }

  public void setMoveCostIsSet(boolean value) {
    this.__isset.moveCost = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CALORIES:
      if (value == null) {
        unsetCalories();
      } else {
        setCalories((Integer)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Integer)value);
      }
      break;

    case EGGCOST:
      if (value == null) {
        unsetEggCost();
      } else {
        setEggCost((Integer)value);
      }
      break;

    case GROWCOST:
      if (value == null) {
        unsetGrowCost();
      } else {
        setGrowCost((Integer)value);
      }
      break;

    case LOOKCOST:
      if (value == null) {
        unsetLookCost();
      } else {
        setLookCost((Integer)value);
      }
      break;

    case MOVECOST:
      if (value == null) {
        unsetMoveCost();
      } else {
        setMoveCost((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CALORIES:
      return new Integer(getCalories());

    case SIZE:
      return new Integer(getSize());

    case EGGCOST:
      return new Integer(getEggCost());

    case GROWCOST:
      return new Integer(getGrowCost());

    case LOOKCOST:
      return new Integer(getLookCost());

    case MOVECOST:
      return new Integer(getMoveCost());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CALORIES:
      return isSetCalories();
    case SIZE:
      return isSetSize();
    case EGGCOST:
      return isSetEggCost();
    case GROWCOST:
      return isSetGrowCost();
    case LOOKCOST:
      return isSetLookCost();
    case MOVECOST:
      return isSetMoveCost();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DinosaurState)
      return this.equals((DinosaurState)that);
    return false;
  }

  public boolean equals(DinosaurState that) {
    if (that == null)
      return false;

    boolean this_present_calories = true;
    boolean that_present_calories = true;
    if (this_present_calories || that_present_calories) {
      if (!(this_present_calories && that_present_calories))
        return false;
      if (this.calories != that.calories)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_eggCost = true;
    boolean that_present_eggCost = true;
    if (this_present_eggCost || that_present_eggCost) {
      if (!(this_present_eggCost && that_present_eggCost))
        return false;
      if (this.eggCost != that.eggCost)
        return false;
    }

    boolean this_present_growCost = true;
    boolean that_present_growCost = true;
    if (this_present_growCost || that_present_growCost) {
      if (!(this_present_growCost && that_present_growCost))
        return false;
      if (this.growCost != that.growCost)
        return false;
    }

    boolean this_present_lookCost = true;
    boolean that_present_lookCost = true;
    if (this_present_lookCost || that_present_lookCost) {
      if (!(this_present_lookCost && that_present_lookCost))
        return false;
      if (this.lookCost != that.lookCost)
        return false;
    }

    boolean this_present_moveCost = true;
    boolean that_present_moveCost = true;
    if (this_present_moveCost || that_present_moveCost) {
      if (!(this_present_moveCost && that_present_moveCost))
        return false;
      if (this.moveCost != that.moveCost)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CALORIES:
          if (field.type == TType.I32) {
            this.calories = iprot.readI32();
            this.__isset.calories = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIZE:
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            this.__isset.size = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EGGCOST:
          if (field.type == TType.I32) {
            this.eggCost = iprot.readI32();
            this.__isset.eggCost = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GROWCOST:
          if (field.type == TType.I32) {
            this.growCost = iprot.readI32();
            this.__isset.growCost = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOOKCOST:
          if (field.type == TType.I32) {
            this.lookCost = iprot.readI32();
            this.__isset.lookCost = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOVECOST:
          if (field.type == TType.I32) {
            this.moveCost = iprot.readI32();
            this.__isset.moveCost = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CALORIES_FIELD_DESC);
    oprot.writeI32(this.calories);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI32(this.size);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EGG_COST_FIELD_DESC);
    oprot.writeI32(this.eggCost);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(GROW_COST_FIELD_DESC);
    oprot.writeI32(this.growCost);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LOOK_COST_FIELD_DESC);
    oprot.writeI32(this.lookCost);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MOVE_COST_FIELD_DESC);
    oprot.writeI32(this.moveCost);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DinosaurState(");
    boolean first = true;

    sb.append("calories:");
    sb.append(this.calories);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eggCost:");
    sb.append(this.eggCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("growCost:");
    sb.append(this.growCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookCost:");
    sb.append(this.lookCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveCost:");
    sb.append(this.moveCost);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

